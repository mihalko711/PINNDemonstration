#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Dec 24, 2024 07:36:58 PM +03  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

import PINNDemonstrationApp_support

_bgcolor = 'SystemButtonFace'
_fgcolor = 'SystemWindowText'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: PINNDemonstrationApp_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'vista.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('vista')
    style.configure('.', font = "TkDefaultFont")
    _style_code_ran = 1

class mainWnd:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("800x600+857+443")
        top.minsize(120, 1)
        top.maxsize(1000, 800)
        top.resizable(1,  1)
        top.title("PINN Demonstration")
        top.configure(borderwidth="5")
        top.configure(highlightcolor="SystemWindowText")

        self.top = top

        self.menubar = tk.Menu(top, font="TkMenuFont", bg='SystemButtonFace'
                ,fg=_fgcolor)
        top.configure(menu = self.menubar)

        _style_code()
        self.frmInfo = ttk.Frame(self.top)
        self.frmInfo.place(relx=0.55, rely=0.1, relheight=0.8, relwidth=0.4)
        self.frmInfo.configure(relief='groove')
        self.frmInfo.configure(borderwidth="2")
        self.frmInfo.configure(relief="groove")

        self.txtProgramInfo = tk.Text(self.frmInfo)
        self.txtProgramInfo.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=1.0)
        self.txtProgramInfo.configure(background="#b5ba87")
        self.txtProgramInfo.configure(cursor="target")
        self.txtProgramInfo.configure(font="-family {Libertinus Serif} -size 12")
        self.txtProgramInfo.configure(highlightcolor="SystemWindowText")
        self.txtProgramInfo.configure(selectbackground="#d9d9d9")
        self.txtProgramInfo.configure(selectforeground="black")
        self.txtProgramInfo.configure(state='disabled')
        self.txtProgramInfo.configure(wrap="word")

        self.Problems = ttk.Frame(self.top)
        self.Problems.place(relx=0.1, rely=0.1, relheight=0.8, relwidth=0.4)
        self.Problems.configure(relief='groove')
        self.Problems.configure(borderwidth="2")
        self.Problems.configure(relief="groove")

        self.btnProblem2 = ttk.Button(self.Problems)
        self.btnProblem2.place(relx=0.1, rely=0.4, height=96, width=256)
        self.btnProblem2.configure(command=PINNDemonstrationApp_support.go_to_problem2)
        self.btnProblem2.configure(text='''Problem 2''')
        self.btnProblem2.configure(compound='left')

        self.btnExit = ttk.Button(self.Problems)
        self.btnExit.place(relx=0.1, rely=0.7, height=96, width=256)
        self.btnExit.configure(command=PINNDemonstrationApp_support.exit_event)
        self.btnExit.configure(text='''Exit''')
        self.btnExit.configure(compound='left')

        self.btnProblem1 = ttk.Button(self.Problems)
        self.btnProblem1.place(relx=0.1, rely=0.1, height=96, width=256)
        self.btnProblem1.configure(command=PINNDemonstrationApp_support.go_to_problem1)
        self.btnProblem1.configure(text='''Problem1''')
        self.btnProblem1.configure(compound='left')

class Problem1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("800x600+670+141")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("PINN для 1-мерной начально-кравеой задачи")
        top.configure(highlightcolor="SystemWindowText")

        self.top = top

        _style_code()
        self.control_elements = ttk.Frame(self.top)
        self.control_elements.place(relx=0.05, rely=0.825, relheight=0.15
                , relwidth=0.4)
        self.control_elements.configure(relief='groove')
        self.control_elements.configure(borderwidth="2")
        self.control_elements.configure(relief="groove")

        self.create_1_btn = ttk.Button(self.control_elements)
        self.create_1_btn.place(relx=0.05, rely=0.056, height=72, width=128)
        self.create_1_btn.configure(command=PINNDemonstrationApp_support.create_model_1)
        self.create_1_btn.configure(takefocus="")
        self.create_1_btn.configure(text='''Создать модель''')
        self.create_1_btn.configure(compound='left')

        self.train_1_btn = ttk.Button(self.control_elements)
        self.train_1_btn.place(relx=0.55, rely=0.056, height=72, width=128)
        self.train_1_btn.configure(command=PINNDemonstrationApp_support.train_model_1)
        self.train_1_btn.configure(takefocus="")
        self.train_1_btn.configure(text='''Тренировать модель''')
        self.train_1_btn.configure(compound='left')

        self.presentation_frame_1 = ttk.Frame(self.top)
        self.presentation_frame_1.place(relx=0.475, rely=0.05, relheight=0.9
                , relwidth=0.5)
        self.presentation_frame_1.configure(relief='groove')
        self.presentation_frame_1.configure(borderwidth="2")
        self.presentation_frame_1.configure(relief="groove")

        self.canvas_1 = tk.Canvas(self.presentation_frame_1)
        self.canvas_1.place(relx=0.01, rely=0.056, relheight=0.45, relwidth=0.98)

        self.canvas_1.configure(borderwidth="2")
        self.canvas_1.configure(highlightcolor="SystemWindowText")
        self.canvas_1.configure(insertbackground="SystemWindowText")
        self.canvas_1.configure(relief="ridge")
        self.canvas_1.configure(selectbackground="#d9d9d9")
        self.canvas_1.configure(selectforeground="black")

        self.list_report_1 = tk.Listbox(self.presentation_frame_1)
        self.list_report_1.place(relx=0.01, rely=0.591, relheight=0.4
                , relwidth=0.98)
        self.list_report_1.configure(background="SystemButtonFace")
        self.list_report_1.configure(disabledforeground="#b4b4b4")
        self.list_report_1.configure(font="TkFixedFont")
        self.list_report_1.configure(foreground="SystemWindowText")
        self.list_report_1.configure(highlightcolor="SystemWindowText")
        self.list_report_1.configure(selectbackground="#d9d9d9")
        self.list_report_1.configure(selectforeground="black")

        self.canvas_1_label = ttk.Label(self.presentation_frame_1)
        self.canvas_1_label.place(relx=0.01, rely=0.009, height=27, width=360)
        self.canvas_1_label.configure(font="-family {Libertinus Serif} -size 9 -weight bold")
        self.canvas_1_label.configure(relief="flat")
        self.canvas_1_label.configure(anchor='w')
        self.canvas_1_label.configure(justify='left')
        self.canvas_1_label.configure(text='''Графики решения и обучения:''')
        self.canvas_1_label.configure(compound='left')

        self.info_report_1_label = ttk.Label(self.presentation_frame_1)
        self.info_report_1_label.place(relx=0.0, rely=0.537, height=27
                , width=360)
        self.info_report_1_label.configure(font="-family {Libertinus Serif} -size 9 -weight bold")
        self.info_report_1_label.configure(relief="flat")
        self.info_report_1_label.configure(anchor='w')
        self.info_report_1_label.configure(justify='left')
        self.info_report_1_label.configure(text='''Отчет о модели:''')
        self.info_report_1_label.configure(compound='left')

        self.input_container_1 = ttk.Frame(self.top)
        self.input_container_1.place(relx=0.05, rely=0.05, relheight=0.75
                , relwidth=0.4)
        self.input_container_1.configure(relief='groove')
        self.input_container_1.configure(borderwidth="2")
        self.input_container_1.configure(relief="groove")

        self.k_1_label = ttk.Label(self.input_container_1)
        self.k_1_label.place(relx=0.05, rely=0.1, height=23, width=32)
        self.k_1_label.configure(font="-family {Libertinus Serif} -size 9 -weight bold")
        self.k_1_label.configure(relief="flat")
        self.k_1_label.configure(anchor='w')
        self.k_1_label.configure(justify='left')
        self.k_1_label.configure(text='''k:''')
        self.k_1_label.configure(compound='left')

        self.q_1_label = ttk.Label(self.input_container_1)
        self.q_1_label.place(relx=0.063, rely=0.2, height=23, width=32)
        self.q_1_label.configure(font="-family {Libertinus Serif} -size 9 -weight bold")
        self.q_1_label.configure(relief="flat")
        self.q_1_label.configure(anchor='w')
        self.q_1_label.configure(justify='left')
        self.q_1_label.configure(text='''q:''')
        self.q_1_label.configure(compound='left')

        self.f_1_label = ttk.Label(self.input_container_1)
        self.f_1_label.place(relx=0.063, rely=0.311, height=23, width=32)
        self.f_1_label.configure(font="-family {Libertinus Serif} -size 9 -weight bold")
        self.f_1_label.configure(relief="flat")
        self.f_1_label.configure(anchor='w')
        self.f_1_label.configure(justify='left')
        self.f_1_label.configure(text='''f:''')
        self.f_1_label.configure(compound='left')

        self.a_b_1_label = ttk.Label(self.input_container_1)
        self.a_b_1_label.place(relx=0.05, rely=0.4, height=23, width=32)
        self.a_b_1_label.configure(font="-family {Libertinus Serif} -size 9 -weight bold")
        self.a_b_1_label.configure(relief="flat")
        self.a_b_1_label.configure(anchor='w')
        self.a_b_1_label.configure(justify='left')
        self.a_b_1_label.configure(text='''a, b:''')
        self.a_b_1_label.configure(compound='left')

        self.u_a_u_b_1_label = ttk.Label(self.input_container_1)
        self.u_a_u_b_1_label.place(relx=0.05, rely=0.5, height=23, width=48)
        self.u_a_u_b_1_label.configure(font="-family {Libertinus Serif} -size 9 -weight bold")
        self.u_a_u_b_1_label.configure(relief="flat")
        self.u_a_u_b_1_label.configure(anchor='w')
        self.u_a_u_b_1_label.configure(justify='left')
        self.u_a_u_b_1_label.configure(text='''u_a,u_b:''')
        self.u_a_u_b_1_label.configure(compound='left')

        self.k_1_input = ttk.Entry(self.input_container_1)
        self.k_1_input.place(relx=0.2, rely=0.1, relheight=0.051, relwidth=0.7)
        self.k_1_input.configure(takefocus="")
        self.k_1_input.configure(cursor="ibeam")

        self.q_1_input = ttk.Entry(self.input_container_1)
        self.q_1_input.place(relx=0.2, rely=0.2, relheight=0.051, relwidth=0.7)
        self.q_1_input.configure(takefocus="")
        self.q_1_input.configure(cursor="ibeam")

        self.f_1_input = ttk.Entry(self.input_container_1)
        self.f_1_input.place(relx=0.2, rely=0.3, relheight=0.051, relwidth=0.7)
        self.f_1_input.configure(takefocus="")
        self.f_1_input.configure(cursor="ibeam")

        self.a_1_input = ttk.Entry(self.input_container_1)
        self.a_1_input.place(relx=0.2, rely=0.4, relheight=0.051, relwidth=0.3)
        self.a_1_input.configure(takefocus="")
        self.a_1_input.configure(cursor="ibeam")

        self.b_1_input = ttk.Entry(self.input_container_1)
        self.b_1_input.place(relx=0.6, rely=0.4, relheight=0.051, relwidth=0.3)
        self.b_1_input.configure(takefocus="")
        self.b_1_input.configure(cursor="ibeam")

        self.u_a_1_input = ttk.Entry(self.input_container_1)
        self.u_a_1_input.place(relx=0.2, rely=0.5, relheight=0.051, relwidth=0.3)

        self.u_a_1_input.configure(takefocus="")
        self.u_a_1_input.configure(cursor="ibeam")

        self.u_b_1_input = ttk.Entry(self.input_container_1)
        self.u_b_1_input.place(relx=0.6, rely=0.5, relheight=0.051, relwidth=0.3)

        self.u_b_1_input.configure(takefocus="")
        self.u_b_1_input.configure(cursor="ibeam")

        self.interval_1_info = ttk.Label(self.input_container_1)
        self.interval_1_info.place(relx=0.75, rely=0.8, height=23, width=64)
        self.interval_1_info.configure(font="-family {Libertinus Serif} -size 9 -weight bold")
        self.interval_1_info.configure(relief="flat")
        self.interval_1_info.configure(anchor='w')
        self.interval_1_info.configure(justify='left')
        self.interval_1_info.configure(text='''100''')
        self.interval_1_info.configure(compound='left')

        self.batch_size_1_info = ttk.Label(self.input_container_1)
        self.batch_size_1_info.place(relx=0.75, rely=0.689, height=23, width=64)
        self.batch_size_1_info.configure(font="-family {Libertinus Serif} -size 9 -weight bold")
        self.batch_size_1_info.configure(relief="flat")
        self.batch_size_1_info.configure(anchor='w')
        self.batch_size_1_info.configure(justify='left')
        self.batch_size_1_info.configure(text='''32''')
        self.batch_size_1_info.configure(compound='left')

        self.epochs_1_info = ttk.Label(self.input_container_1)
        self.epochs_1_info.place(relx=0.75, rely=0.6, height=23, width=64)
        self.epochs_1_info.configure(font="-family {Libertinus Serif} -size 9 -weight bold")
        self.epochs_1_info.configure(relief="flat")
        self.epochs_1_info.configure(anchor='w')
        self.epochs_1_info.configure(justify='left')
        self.epochs_1_info.configure(text='''1000''')
        self.epochs_1_info.configure(compound='left')

        self.epochs_label_1 = ttk.Label(self.input_container_1)
        self.epochs_label_1.place(relx=0.063, rely=0.6, height=23, width=48)
        self.epochs_label_1.configure(font="-family {Libertinus Serif} -size 9 -weight bold")
        self.epochs_label_1.configure(relief="flat")
        self.epochs_label_1.configure(anchor='w')
        self.epochs_label_1.configure(justify='left')
        self.epochs_label_1.configure(text='''epocsh:''')
        self.epochs_label_1.configure(compound='left')

        self.batch_size_1_label = ttk.Label(self.input_container_1)
        self.batch_size_1_label.place(relx=0.019, rely=0.7, height=23, width=58)
        self.batch_size_1_label.configure(font="-family {Libertinus Serif} -size 9 -weight bold")
        self.batch_size_1_label.configure(relief="flat")
        self.batch_size_1_label.configure(anchor='w')
        self.batch_size_1_label.configure(justify='left')
        self.batch_size_1_label.configure(text='''batch size:''')
        self.batch_size_1_label.configure(compound='left')

        self.info_1_label = ttk.Label(self.input_container_1)
        self.info_1_label.place(relx=0.019, rely=0.8, height=23, width=58)
        self.info_1_label.configure(font="-family {Libertinus Serif} -size 9 -weight bold")
        self.info_1_label.configure(relief="flat")
        self.info_1_label.configure(anchor='w')
        self.info_1_label.configure(justify='left')
        self.info_1_label.configure(text='''interval:''')
        self.info_1_label.configure(compound='left')

        self.epochs_1_scale = ttk.Scale(self.input_container_1, from_=1000, to=100000)
        self.epochs_1_scale.place(relx=0.2, rely=0.6, relheight=0.051
                , relwidth=0.5)
        self.epochs_1_scale.configure(command=PINNDemonstrationApp_support.epochs_1_chng)
        self.epochs_1_scale.set(1000.0)
        self.epochs_1_scale.configure(takefocus="")

        self.batch_size_1_scale = ttk.Scale(self.input_container_1, from_=32, to=256)
        self.batch_size_1_scale.place(relx=0.2, rely=0.7, relheight=0.051
                , relwidth=0.5)
        self.batch_size_1_scale.configure(command=PINNDemonstrationApp_support.batch_size_1_cnhg)
        self.batch_size_1_scale.configure(takefocus="")

        self.info_int_1_scale = ttk.Scale(self.input_container_1, from_=100, to=10000)
        self.info_int_1_scale.place(relx=0.2, rely=0.8, relheight=0.051
                , relwidth=0.5)
        self.info_int_1_scale.configure(command=PINNDemonstrationApp_support.interval_1_chng)
        self.info_int_1_scale.configure(takefocus="")

class Problem2:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("800x600+820+10")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("PINN для 2-мерной начально-краевой задачи")
        top.configure(highlightcolor="SystemWindowText")

        self.top = top

def start_up():
    PINNDemonstrationApp_support.main()

if __name__ == '__main__':
    PINNDemonstrationApp_support.main()




