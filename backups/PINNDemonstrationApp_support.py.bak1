#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Dec 25, 2024 02:51:48 AM +03  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import PINNDemonstrationApp

_debug = True # False to eliminate debug printing from callback functions.

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top2, _w2
    _top2 = root
    _w2 = PINNDemonstrationApp.mainWnd(_top2)
    # Creates a toplevel widget.
    global _top3, _w3
    _top3 = tk.Toplevel(root)
    _w3 = PINNDemonstrationApp.Problem1(_top3)
    # Creates a toplevel widget.
    global _top4, _w4
    _top4 = tk.Toplevel(root)
    _w4 = PINNDemonstrationApp.Problem2(_top4)
    root.mainloop()

def batch_size_1_cnhg(*args):
    if _debug:
        print('PINNDemonstrationApp_support.batch_size_1_cnhg')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def create_model_1(*args):
    if _debug:
        print('PINNDemonstrationApp_support.create_model_1')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def create_model_2(*args):
    if _debug:
        print('PINNDemonstrationApp_support.create_model_2')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def epochs_1_chng(*args):
    if _debug:
        print('PINNDemonstrationApp_support.epochs_1_chng')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def exit_event(*args):
    if _debug:
        print('PINNDemonstrationApp_support.exit_event')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def go_to_problem1(*args):
    if _debug:
        print('PINNDemonstrationApp_support.go_to_problem1')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def go_to_problem2(*args):
    if _debug:
        print('PINNDemonstrationApp_support.go_to_problem2')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def interval_1_chng(*args):
    if _debug:
        print('PINNDemonstrationApp_support.interval_1_chng')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def train_model_1(*args):
    if _debug:
        print('PINNDemonstrationApp_support.train_model_1')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

def train_model_2(*args):
    if _debug:
        print('PINNDemonstrationApp_support.train_model_2')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()

if __name__ == '__main__':
    PINNDemonstrationApp.start_up()




