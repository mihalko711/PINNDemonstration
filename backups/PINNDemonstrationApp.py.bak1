#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Dec 24, 2024 03:02:37 AM +03  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

import PINNDemonstrationApp_support

_bgcolor = 'SystemButtonFace'
_fgcolor = 'SystemWindowText'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: PINNDemonstrationApp_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'vista.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('vista')
    style.configure('.', font = "TkDefaultFont")
    _style_code_ran = 1

class mainWnd:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("800x600+10+10")
        top.minsize(120, 1)
        top.maxsize(1000, 800)
        top.resizable(1,  1)
        top.title("PINN Demonstration")
        top.configure(borderwidth="5")
        top.configure(highlightcolor="SystemWindowText")

        self.top = top

        self.menubar = tk.Menu(top, font="TkMenuFont", bg='SystemButtonFace'
                ,fg=_fgcolor)
        top.configure(menu = self.menubar)

        _style_code()
        self.frmInfo = ttk.Frame(self.top)
        self.frmInfo.place(relx=0.55, rely=0.1, relheight=0.8, relwidth=0.4)
        self.frmInfo.configure(relief='groove')
        self.frmInfo.configure(borderwidth="2")
        self.frmInfo.configure(relief="groove")

        self.txtProgramInfo = tk.Text(self.frmInfo)
        self.txtProgramInfo.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=1.0)
        self.txtProgramInfo.configure(background="#b5ba87")
        self.txtProgramInfo.configure(cursor="target")
        self.txtProgramInfo.configure(font="-family {Libertinus Serif} -size 12")
        self.txtProgramInfo.configure(foreground="black")
        self.txtProgramInfo.configure(highlightbackground="#d9d9d9")
        self.txtProgramInfo.configure(highlightcolor="SystemWindowText")
        self.txtProgramInfo.configure(selectbackground="#d9d9d9")
        self.txtProgramInfo.configure(selectforeground="black")
        self.txtProgramInfo.configure(state='disabled')
        self.txtProgramInfo.configure(wrap="word")

        self.Problems = ttk.Frame(self.top)
        self.Problems.place(relx=0.1, rely=0.1, relheight=0.8, relwidth=0.4)
        self.Problems.configure(relief='groove')
        self.Problems.configure(borderwidth="2")
        self.Problems.configure(relief="groove")

        self.btnProblem2 = ttk.Button(self.Problems)
        self.btnProblem2.place(relx=0.1, rely=0.4, height=96, width=256)
        self.btnProblem2.configure(command=PINNDemonstrationApp_support.go_to_problem2)
        self.btnProblem2.configure(text='''Problem 2''')
        self.btnProblem2.configure(compound='left')

        self.btnExit = ttk.Button(self.Problems)
        self.btnExit.place(relx=0.1, rely=0.7, height=96, width=256)
        self.btnExit.configure(command=PINNDemonstrationApp_support.exit_event)
        self.btnExit.configure(text='''Exit''')
        self.btnExit.configure(compound='left')

        self.btnProblem1 = ttk.Button(self.Problems)
        self.btnProblem1.place(relx=0.1, rely=0.1, height=96, width=256)
        self.btnProblem1.configure(command=PINNDemonstrationApp_support.go_to_problem1)
        self.btnProblem1.configure(text='''Problem1''')
        self.btnProblem1.configure(compound='left')

class Problem1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("800x600+10+650")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("PINN для 1-мерной начально-кравеой задачи")
        top.configure(highlightcolor="SystemWindowText")

        self.top = top

class Problem2:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("800x600+820+10")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(1,  1)
        top.title("PINN для 2-мерной начально-краевой задачи")
        top.configure(highlightcolor="SystemWindowText")

        self.top = top

def start_up():
    PINNDemonstrationApp_support.main()

if __name__ == '__main__':
    PINNDemonstrationApp_support.main()




